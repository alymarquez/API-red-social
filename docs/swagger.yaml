openapi: 3.0.0
info:
  title: Duckers Anti-Social API
  description: API para la red social Duckers Anti-Social. Permite crear usuarios, realizar publicaciones, comentar, subir imágenes y etiquetar contenidos.
  version: "1.0.0"

servers:
  - url: http://localhost:3000/

paths:
  /users:
    get:
      summary: Obtener todos los usuarios
      tags: [Users]
      responses:
        '200':
          description: Lista de usuarios
    post:
      summary: Crear un usuario nuevo
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario creado exitosamente
        '500':
          description: Error al crear Usuario

  /users/{id}:
    put:
      summary: Actualizar un usuario por ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado exitosamente
        '404':
          description: No existe usuario con esa ID
        '500':
          description: Error al actualizar usuario
    delete:
      summary: Eliminar un usuario por ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Usuario eliminado exitosamente
        '404':
          description: No existe usuario con esa ID
        '500':
          description: Error al actualizar usuario

  /users/{id}/users:
    post:
      summary: Seguir a un usuario
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seguidoId:
                  type: integer
                  example: 3
      responses:
        '201':
          description: Has seguido correctamente a este usuario
        '404':
          description: Usuario/s no encontrado/s
        '404':
          description: No puedes seguirte a ti mismo
        '404':
          description: Ya sigues a este usuario
        '500':
          description: Error al seguir al usuario

    delete:
      summary: Dejar de seguir a un usuario
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seguidoId:
                  type: integer
                  example: 3
      responses:
        '201':
          description: Has dejado de seguir a este usuario
        '404':
          description: Usuario/s no encontrado/s
        '404':
          description: No sigues a este usuario
        '500':
          description: Error al dejar de seguir a usuario

  /posts:
    get:
      summary: Obtener todas las publicaciones
      tags: [Posts]
      responses:
        '200':
          description: Lista de publicaciones visibles
  
    post:
      summary: Crear una publicación nueva (con imágenes opcionales)
      tags: [Posts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - content
              properties:
                userId:
                  type: integer
                  example: 1
                content:
                  type: string
                  example: "Esto es una publicación nueva"
                imagenes:
                  type: array
                  maxItems: 5
                  items:
                    type: object
                    required:
                      - url
                    properties:
                      url:
                        type: string
                        format: uri
                        example: "https://picsum.photos/id/120/200/300"
      responses:
        '200':
          description: Publicación creada exitosamente
        '404':
          description: Usuario inexistente
        '500':
          description: Error al crear publicación

  /posts/{id}:
    put:
      summary: Actualizar una publicación por ID
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - content
              properties:
                userId:
                  type: integer
                  example: 1
                content:
                  type: string
                  example: "Actualizacion de contenido"
      responses:
        '200':
          description: Publicación actualizada exitosamente
        '404':
          description: No existe publicacion o usuario con esa ID
        '500':
          description: Error al actualizar publicación

    delete:
      summary: Eliminar una publicación por ID
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Publicación eliminada exitosamente
        '404':
          description: Publicacion no encontrada
        '500':
          description: Error al actualizar publicación

  /posts/{id}/images/{imageId}:
    put:
      summary: Actualizar imagen de una publicación por ID
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: imageId
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  url: string
                  example: "https://imagesupdate.jpg"
      responses:
        '200':
          description: Imagen actualizada exitosamente
        '404':
          description: No existe publicacion o imagen
        '500':
          description: Error al actualizar imagen

    delete:
      summary: Eliminar imagen de una publicación por ID
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: imageId
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Imagen eliminada exitosamente
        '404':
          description: Publicacion o imagen no encontrada
        '500':
          description: Error al eliminar imagen

  /posts/{id}/tags:
    post:
      summary: Asociar tag a una publicación
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagId:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Tag asociado correctamente al Post
        '404':
          description: Post o Tag no encontrado
        '500':
          description: Error al asociar el tag al post

    delete:
      summary: Desasociar tag de una publicación
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagId:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Tag eliminado correctamente al Post
        '404':
          description: Post o Tag no encontrado
        '500':
          description: Error al eliminar el tag del post

  /comments:
    get:
      summary: Obtener todos los comentarios
      tags: [Comments]
      responses:
        '200':
          description: Comentarios visibles (según filtro por antigüedad)
    post:
      summary: Crear un comentario
      tags: [Comments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comentario creado exitosamente
        '404':
          description: Post o Usuario inexistentes
        '500':
          description: Error al crear comentario

  /comments/{id}:
    put:
      summary: Actualizar un comentario por ID
      tags: [Comments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comentario actualizado exitosamente
        '404':
          description: No existe comentario con esa ID
        '500':
          description: Error al actualizar comentario

    delete:
      summary: Eliminar un comentario por ID
      tags: [Comments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Comentario eliminado
        '404':
          description: No existe comentario con esa ID
        '500':
          description: Error al eliminar comentario

  /archives:
    get:
      summary: Obtener todas las imágenes
      tags: [PostImages]
      responses:
        '200':
          description: Lista de imágenes

    post:
      summary: Crear una imagen para un post
      tags: [PostImages]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - postId
                - url
              properties:
                postId:
                  type: integer
                  example: 1
                url:
                  type: string
                  example: "https://assets/lenguajes.png"
              
      responses:
        '200':
          description: Imagen creada exitosamente
        '400':
          description: El post ya tiene el máximo de 5 imágenes
        '404':
          description: Post inexistente
        '500':
          description: Error al crear Imagen

  /archives/{id}:
    put:
      summary: Actualizar una imagen por ID
      tags: [PostImages]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: integer
                  example: "https://imagenactualizada.jpg"

      responses:
        '200':
          description: Imagen actualizada exitosamente
        '404':
          description: No existe imagen con ID
        '500':
          description: Error al actualizar Imagen
        
    delete:
      summary: Eliminar una imagen por ID
      tags: [PostImages]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Imagen eliminada exitosamente
        '404':
          description: No existe imagen con ID
        '500':
          description: Error al eliminar Imagen


  /tags:
    get:
      summary: Obtener todos los tags
      tags: [Tags]
      responses:
        '200':
          description: Tags existentes

    post:
      summary: Crear un tag por ID
      tags: [Tags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: Tag creado exitosamente
        '500':
          description: Error al crear Tag

  /tags/{id}:
    put:
      summary: Actualizar un tag por ID
      tags: [Tags]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: Tag actualizado exitosamente
        '404':
          description: No existe etiqueta con esa ID
        '500':
          description: Error al actualizar Tag

    delete:
      summary: Eliminar un tag por ID
      tags: [Tags]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Tag eliminado exitosamente
        '404':
          description: No existe etiqueta con esa ID
        '500':
          description: Error al eliminar Tag

components:
  schemas:
    User:
      type: object
      required: [nickName, email]
      properties:
        nickName:
          type: string
          description: Nombre de usuario único
          example: "codeMiau99"
        email:
          type: string
          format: email
          example: "codemiau99@unahur.edu.ar"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-10T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-05-16T12:45:00Z"

    Post:
      type: object
      required: [userId, content]
      properties:
        userId:
          type: integer
          example: 1
        content:
          type: string
          example: "Python > Java."
        imagenes:
          type: array
          items:
            $ref: '#/components/schemas/PostImage'

    PostImage:
      type: object
      required: [url]
      properties:
        url:
          type: string
          format: uri
          example: "https://assets/lenguajes.png"
        postId:
          type: integer
          example: 1

    Comment:
      type: object
      required: [postId, userId, comment]
      properties:
        postId:
          type: integer
          example: 2
        userId:
          type: integer
          example: 4
        comment:
          type: string
          example: "Muy buena publicacion !!!"

    Tag:
      type: object
      required: [tag]
      properties:
        tag:
          type: string
          example: "Informática"
